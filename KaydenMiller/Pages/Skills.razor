@page "/Skills"
@using KaydenMiller.Models
@using DataAccessLayer
@using DataAccessLayer.Models
@inject ISkillData _skillData
@inject ISkillCategoryData _skillCategoryData

@if (_skills is null)
{
    <div>Loading...</div>
}
else
{
    <div class="content-container">
        <MatTable Items="@_skills" Class="mat-elevation-z5" ShowPaging="false" UseSortHeaderRow="true">
            <MatTableHeader>
                <MatSortHeaderRow>
                    <MatSortHeader SortId="category">Category</MatSortHeader>
                    <MatSortHeader SortId="name">Name</MatSortHeader>
                    <MatSortHeader SortId="rating">Rating</MatSortHeader>
                </MatSortHeaderRow>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.CategoryName</td>
                <td>@context.Skill.Name</td>
                <td>
                    <div class="star-rating-container">
                        <StarRating Id="star-rating" StarValue="@(context?.Skill.PersonalRating ?? 1)"/>
                    </div>
                </td>
            </MatTableRow>
        </MatTable>
    </div>
}

@code {
    private List<SkillDataGridDisplayModel> _skills;
    private string[] _groupColumns = { "CategoryName" };

    private bool VisibleProperty { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var skillCategories = await _skillCategoryData.GetSkillCategories();
        var skills = await _skillData.GetSkills();
        _skills = skillCategories.Join(skills, 
                scm => scm.Id,
                sc => sc.SkillCategoryId, 
                (scm, sm) => new SkillDataGridDisplayModel
                {
                    CategoryName = scm.Name,
                    Skill = new() {
                        Name = sm.Name,
                        PersonalRating = sm.PersonalStarRating,
                        Tooltip = sm.Tooltip,
                        RelatedExperienceLinks = Array.Empty<string>()
                    }
                })
            .ToList();
    }

}